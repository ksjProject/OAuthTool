[파일명 제안] key_rotation_required_inputs.txt

이 모듈(vuln check module)이 'Data Controller'에게서 받아야 할 입력(패킷/메타데이터) 명세
— 공식문서 기준 흐름: Discovery(=AS/OP 메타데이터) → jwks_uri(HTTPS) → JWKS → 토큰들

1) Discovery 응답(JSON) 스냅샷
   - discovery_url: 실제 요청한 URL (예: https://issuer/.well-known/openid-configuration)
   - http_status: 정수
   - body_json: 원본 JSON 전체
   - tls_verified: bool (인증서·호스트 일치 검증 성공 여부)
   - redirect_chain: [ {from, to, code} ]  (있다면)

2) JWKS 조회 이벤트 목록 (여러 번 있을 수 있음; 각각 스냅샷)
   - requested_url: discovery.body.jwks_uri 값
   - final_url: 최종 도달 URL (리다이렉트 발생 시)
   - http_status: 정수
   - scheme: "https" | "http"
   - host: 최종 호스트명
   - redirect_chain: [ {from, to, code} ]  (있다면)
   - headers: { "etag": "...", "cache-control": "..." }  (있다면)
   - jwks_json: { "keys": [ ... ] }  (원본 그대로)

3) 토큰(헤더를 포함한 원문 문자열) 목록
   각 항목: 
   - token_type: "id_token" | "access_token" | "client_assertion"
   - jwt: 토큰 원문(JWS Compact)
   - obtained_from: "token_response" | "authorization" | "userinfo" | "client_auth" 등 출처 메모(선택)
   - observed_at: ISO-8601 타임스탬프(선택)

4) (선택) 클라이언트 등록 메타데이터 스냅샷 (동적등록/정적등록 불문)
   - registration_source: "dynamic" | "static"
   - jwks_uri: (있으면)
   - jwks: (있으면; jwks_uri와 동시 제공이면 안 됨)
   - token_endpoint_auth_method: "private_key_jwt" | "client_secret_jwt" | ... 
   - token_endpoint_auth_signing_alg: 기대 서명 alg (예: "RS256")

5) (선택) 정책/설정
   - allowed_algs: ["RS256","ES256",...]  (검증 허용 알고리즘 화이트리스트)
   - issuer_hint: 기대 issuer(문자열). 토큰 클레임 iss와 비교할 때 사용

주의: 
- 모든 JSON 스냅샷은 원문 그대로 전달(민감정보 마스킹은 가능). 
- 최소한 1개의 Discovery, 1개의 JWKS, 그리고 1개의 토큰(ID 토큰)이 있어야 유의미한 판단이 가능.